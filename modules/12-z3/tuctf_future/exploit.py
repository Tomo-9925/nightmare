from z3 import *


def genMatrix(str):
  mat = [[None for _ in range(5)] for _ in range(5)]
  for i in range(25):
    m = (i * 2) % 25
    f = (i * 7) % 25
    mat[m // 5][m % 5] = str[f]
  return mat


def genAuthString(mat):
  result = [''] * 18
  result[0] = mat[0][0] + mat[4][4]
  result[1] = mat[2][1] + mat[0][2]
  result[2] = mat[4][2] + mat[4][1]
  result[3] = mat[1][3] + mat[3][1]
  result[4] = mat[3][4] + mat[1][2]
  result[5] = mat[1][0] + mat[2][3]
  result[6] = mat[2][4] + mat[2][0]
  result[7] = mat[3][3] + mat[3][2] + mat[0][3]
  result[8] = mat[0][4] + mat[4][0] + mat[0][1]
  result[9] = mat[3][3] + mat[2][0]
  result[10] = mat[4][0] + mat[1][2]
  result[11] = mat[0][4] + mat[4][1]
  result[12] = mat[0][3] + mat[0][2]
  result[13] = mat[3][0] + mat[2][0]
  result[14] = mat[1][4] + mat[1][2]
  result[15] = mat[4][3] + mat[2][3]
  result[16] = mat[2][2] + mat[0][2]
  result[17] = mat[1][1] + mat[4][1]
  return result


def solve(desired_output):
  inp = [BitVec(i, 8) for i in range(25)]
  mat = genMatrix(inp)
  auth = genAuthString(mat)
  solver = Solver()

  for i in range(len(auth)):
    solver.add(auth[i] == desired_output[i])
  if solver.check() != sat:
    return None
  ans = solver.model()
  return "".join([chr(int(str(ans[i])))
                  for i in inp])


def main():
  desired_output = [
      0x8b, 0xce, 0xb0, 0x89, 0x7b, 0xb0, 0xb0, 0xee, 0xbf, 0x92, 0x65, 0x9d, 0x9a, 0x99, 0x99, 0x94, 0xad, 0xe4]
  desired_input = solve(desired_output)
  print(desired_input)


if __name__ == '__main__':
  main()
