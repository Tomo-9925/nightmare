from z3 import *


def reverse_operation(desired_output):
  result = [(~x & 0xFF) for x in desired_output]
  result.reverse()
  return result


def solve(alt_desired_output):
  inp = [BitVec(i, 16) for i in alt_desired_output]
  solver = Solver()
  for i in range(len(alt_desired_output)):
    x = (2 * (inp[i] & 0x55)) | ((inp[i] >> 1) & 0x55)
    y = (4 * (x & 0x33)) | ((x >> 2) & 0x33)
    z = (y << 4) | (y >> 4)
    z = z & 0xff
    solver.add(z == alt_desired_output[i])
  if solver.check() != sat:
    return None
  ans = solver.model()
  return "".join([chr(int(str(ans[i])))
                  for i in inp])


def main():
  desired_output = [0x41, 0x29, 0xd9, 0x65, 0xa1, 0xf1, 0xe1, 0xc9, 0x19, 0x09, 0x93, 0x13, 0xa1, 0x09, 0xb9,
                    0x49, 0xb9, 0x89, 0xdd, 0x61, 0x31, 0x69, 0xa1, 0xf1, 0x71, 0x21, 0x9d, 0xd5, 0x3d, 0x15, 0xd5]  # removed null byte
  reversed_output = reverse_operation(desired_output)
  desired_input = solve(reversed_output)
  print(desired_input)


if __name__ == '__main__':
  main()
